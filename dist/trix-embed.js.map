{
  "version": 3,
  "sources": ["../src/encryption.js", "../src/urls.js", "../src/media.js", "../src/renderer.js", "../src/controller.js", "../src/index.js"],
  "sourcesContent": ["const options = { name: 'AES-GCM', length: 256 } // encryption options\nconst extractable = true // makes it possible to export the key\nconst purposes = ['encrypt', 'decrypt']\n\n// Generates a key for use with a symmetric encryption algorithm\n//\n// @returns {CryptoKey} - The generated key\n//\nasync function generateKey() {\n  const extractable = true // makes it possible to export the key later\n  const purposes = ['encrypt', 'decrypt']\n  return await crypto.subtle.generateKey(options, extractable, purposes)\n}\n\n// Exports an encryption key\n//\n// @param {CryptoKey} key - The key to export\n// @returns {String} - The exported key as a string\n//\nasync function exportKey(key) {\n  const exported = await crypto.subtle.exportKey('jwk', key)\n  return JSON.stringify(exported)\n}\n\n// Imports an encryption key\n//\n// @param {String} key - The key to import as a string\n// @returns {CryptoKey} - The imported key\n//\nasync function importKey(key) {\n  const parsed = JSON.parse(key)\n  return await crypto.subtle.importKey('jwk', parsed, options, extractable, purposes)\n}\n\n// Encrypts a value using a symmetric encryption algorithm\n//\n// @param {String} value - The value to encrypt\n// @param {CryptoKey} key - The key to use for encryption\n// @returns {String} - Base64 encoded representation of the encrypted value\n//\nasync function encrypt(value, key) {\n  const encoded = new TextEncoder().encode(String(value))\n  const iv = crypto.getRandomValues(new Uint8Array(12)) // initialization vector\n  const buffer = await crypto.subtle.encrypt({ ...options, iv }, key, encoded) // ciphertext as an ArrayBuffer\n  const data = {\n    ciphertext: btoa(String.fromCharCode(...new Uint8Array(buffer))),\n    iv: btoa(String.fromCharCode(...iv))\n  }\n  return btoa(JSON.stringify(data))\n}\n\n// Decrypts a value using a symmetric encryption algorithm\n//\n// @param {String} encrypted - The Base64 encoded encrypted value\n// @param {CryptoKey} key - The key to use for decryption\n// @returns {String} - The decrypted value\n//\nasync function decrypt(encrypted, key) {\n  const data = JSON.parse(atob(encrypted))\n  const ciphertextArray = new Uint8Array(\n    atob(data.ciphertext)\n      .split('')\n      .map(char => char.charCodeAt(0))\n  )\n  const iv = new Uint8Array(\n    atob(data.iv)\n      .split('')\n      .map(char => char.charCodeAt(0))\n  )\n\n  const buffer = await crypto.subtle.decrypt({ ...options, iv }, key, ciphertextArray)\n  return new TextDecoder().decode(buffer)\n}\n\n// Generates and logs a new encryption key\n//\n// @returns {void}\n//\nexport function generateAndLogEncryptionKey() {\n  generateKey()\n    .then(key => exportKey(key))\n    .then(key => console.log(btoa(key)))\n}\n\n// Encrypts and logs a list of values\n//\n// @param {String} key - The Base64 encoded encryption key to use\n// @param {String[]} values - The clear text values to encrypt\n// @returns {void}\n//\nexport function encryptAndLogValues(key, values = []) {\n  importKey(atob(key)).then(key => {\n    values.forEach(value =>\n      encrypt(value, key).then(encrypted =>\n        decrypt(encrypted, key).then(decrypted => console.log({ input: value, encrypted, decrypted }))\n      )\n    )\n  })\n}\n", "// Creates a URL object from a value and yields the result\n//\n// @param {String} value - Value to convert to a URL (coerced to a string)\n// @param {Function} callback - Function to be called with the URL object\n// @returns {URL, null} URL object\n//\nexport function createURL(value, callback = url => {}) {\n  try {\n    const url = new URL(String(value).trim())\n    if (callback) callback(url)\n    return url\n  } catch (_error) {\n    console.info('trix-embed', `Failed to parse URL! value='${value}']`)\n  }\n  return null\n}\n\n// Creates a URL host from a value and yields the result\n//\n// @param {String} value - Value to convert to a URL host (coerced to a string)\n// @param {Function} callback - Function to be called with the URL host\n// @returns {String, null} URL host\n//\nfunction createURLHost(value, callback = host => {}) {\n  let host = null\n  createURL(value, url => (host = url.host))\n  if (host && callback) callback(host)\n  return host\n}\n\nfunction extractURLsFromTextNodes(element) {\n  const urls = []\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, node => {\n    const value = node.nodeValue\n    if (!value.includes('http')) return NodeFilter.FILTER_REJECT\n    return NodeFilter.FILTER_ACCEPT\n  })\n\n  let node\n  while ((node = walker.nextNode()))\n    node.nodeValue\n      .split(/\\s+/)\n      .filter(val => val.startsWith('http'))\n      .forEach(match =>\n        createURL(match, url => {\n          if (!urls.includes(url.href)) urls.push(url.href)\n        })\n      )\n\n  return urls\n}\n\nfunction extractURLsFromElements(element) {\n  const urls = []\n\n  if (element.src) createURL(element.src, url => urls.push(url.href))\n  if (element.href)\n    createURL(element.href, url => {\n      if (!urls.includes(url.href)) urls.push(url.href)\n    })\n\n  const elements = element.querySelectorAll('[src], [href]')\n  elements.forEach(el => {\n    createURL(el.src || el.href, url => {\n      if (!urls.includes(url.href)) urls.push(url.href)\n    })\n  })\n\n  return urls\n}\n\nexport function validateURL(value, allowedHosts = []) {\n  let valid = false\n  createURLHost(value, host => (valid = !!allowedHosts.find(allowedHost => host.includes(allowedHost))))\n  return valid\n}\n\nexport function extractURLHosts(values) {\n  return values.reduce((hosts, value) => {\n    createURLHost(value, host => {\n      if (!hosts.includes(host)) hosts.push(host)\n    })\n    return hosts\n  }, [])\n}\n\n// Extracts all URLs from an HTML element (all inclusive i.e. elements and text nodes)\n//\n// @param {HTMLElement} element - HTML element\n// @returns {String[]} list of unique URLs\n//\nexport function extractURLsFromElement(element) {\n  const elementURLs = extractURLsFromElements(element)\n  const textNodeURLs = extractURLsFromTextNodes(element)\n  const uniqueURLs = new Set([...elementURLs, ...textNodeURLs])\n  return [...uniqueURLs]\n}\n", "const audioMediaTypes = {\n  mp3: 'audio/mpeg', // MP3 audio format\n  ogg: 'audio/ogg', // OGG audio format\n  wav: 'audio/wav' // WAV audio format\n}\n\nconst imageMediaTypes = {\n  avif: 'image/avif', // AVIF image format\n  bmp: 'image/bmp', // BMP image format\n  gif: 'image/gif', // GIF image format\n  heic: 'image/heic', // HEIC image format\n  heif: 'image/heif', // HEIF image format\n  ico: 'image/x-icon', // ICO image format\n  jp2: 'image/jp2', // JPEG 2000 image format\n  jpeg: 'image/jpeg', // JPEG image format\n  jpg: 'image/jpeg', // JPEG image format (alternative extension)\n  jxr: 'image/vnd.ms-photo', // JPEG XR image format\n  png: 'image/png', // PNG image format\n  svg: 'image/svg+xml', // SVG image format\n  tif: 'image/tiff', // TIFF image format\n  tiff: 'image/tiff', // TIFF image format (alternative extension)\n  webp: 'image/webp' // WebP image format\n}\n\nconst videoMediaTypes = {\n  mp4: 'video/mp4', // MP4 video format\n  ogv: 'video/ogg', // OGG video format\n  webm: 'video/webm' // WebM video format\n}\n\n// TODO: Expand to all media types once proper templates are implemented\nconst mediaTypes = imageMediaTypes\n\nconst tagsWithHrefAttribute = [\n  'animate', // SVG: Animation\n  'animateMotion', // SVG: Animation\n  'animateTransform', // SVG: Animation\n  'area', // HTML: Image map area\n  'audio', // HTML: Audio content\n  'base', // HTML: Base URL\n  'embed', // HTML: Embedded content\n  'feDisplacementMap', // SVG: Filter primitive\n  'feImage', // SVG: Filter primitive\n  'feTile', // SVG: Filter primitive\n  'filter', // SVG: Filter container\n  'font-face-uri', // SVG: Font reference\n  'iframe', // HTML: Inline frame\n  'image', // SVG: Image\n  'link', // HTML: External resources (e.g., stylesheets)\n  'object', // HTML: Embedded content (fallback for non-HTML5 browsers)\n  'script', // HTML: External scripts\n  'source', // HTML: Media source\n  'track', // HTML: Text tracks for media elements\n  'use', // SVG: Reuse shapes from other documents\n  'video' // HTML: Video content\n]\n\nconst tagsWithSrcAttribute = [\n  'audio', // HTML: Audio content\n  'embed', // HTML: Embedded content\n  'iframe', // HTML: Inline frame\n  'img', // HTML: Images\n  'input', // HTML: Input elements with type=\"image\"\n  'script', // HTML: External scripts\n  'source', // HTML: Media source\n  'track', // HTML: Text tracks for media elements\n  'video', // HTML: Video content\n  'frame', // HTML: Deprecated (use iframe instead)\n  'frameset', // HTML: Deprecated (use iframe instead)\n  'object', // HTML: Embedded content\n  'picture', // HTML: Responsive images\n  'use' // SVG: Reuse shapes from other documents\n]\n\nexport const mediaTags = tagsWithHrefAttribute.concat(tagsWithSrcAttribute)\n\nexport function getMediaType(url) {\n  try {\n    url = new URL(url)\n\n    const index = url.pathname.lastIndexOf('.')\n    if (!index) return null\n\n    const extension = url.pathname.substring(index + 1)\n    return mediaTypes[extension]\n  } catch (error) {\n    console.error('Failed to detect media type!', url, error)\n  }\n}\n", "import { createURL, extractURLHosts } from './urls'\nimport { getMediaType } from './media'\n\nexport default class Renderer {\n  // Constructs a new Renderer instance\n  //\n  // @param {Controller} controller - a Stimulus Controller instance\n  constructor(controller) {\n    this.controller = controller\n    this.hosts = controller.hostsValue\n\n    // invalid urls template\n    if (controller.invalidTemplateValue) {\n      const template = document.getElementById(controller.invalidTemplateValue)\n      if (template) this.invalidTemplate = template\n    }\n\n    // valid urls template\n    if (controller.validTemplateValue) {\n      const template = document.getElementById(controller.validTemplateValue)\n      if (template) this.validTemplate = template\n    }\n  }\n\n  renderHeader(value, content = '') {\n    if (!content?.length) return\n    return `\n    <h1 style=\"background-color:ivory; border:solid 1px red; color:red; padding:5px; display:flex; align-items:center; font-size:1.25rem; line-height:1.5rem;\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" style=\"flex:1; width:1rem; height:1rem;\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 13.5L12 21m0 0l-7.5-7.5M12 21V3\" />\n      </svg>\n      ${value}\n      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" style=\"flex:1; width:1rem; height:1rem;\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 13.5L12 21m0 0l-7.5-7.5M12 21V3\" />\n      </svg>\n    </h1>\n    `\n  }\n\n  // Renders a URL as an HTML embed i.e. an iframe or media tag (img, video, audio etc.)\n  //\n  // @param {String} url - URL\n  // @returns {String} HTML\n  //\n  renderEmbed(url = 'https://example.com') {\n    const element = this.validTemplate.content.firstElementChild.cloneNode(true)\n    const iframe = element.querySelector('iframe')\n    const img = element.querySelector('img')\n\n    if (getMediaType(url)) {\n      iframe.remove()\n      img.src = url\n    } else {\n      img.remove()\n      iframe.src = url\n    }\n    return element.outerHTML\n  }\n\n  // Renders a list of URLs as a list of HTML links i.e. anchor tags <a>\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String[]} list of individual HTML links\n  //\n  renderLinks(urls = ['https://example.com', 'https://test.com']) {\n    urls = urls\n      .reduce((list, url) => {\n        createURL(url, u => list.push(u))\n        return list\n      }, urls || [])\n      .sort()\n\n    if (!urls.length) return\n    const links = urls.map(url => `<li><a href='${url}'>${url}</a></li>`)\n    return `<ul>${links.join('')}</ul><br>`\n  }\n\n  // Renders a list of URLs as HTML embeds i.e. iframes or media tags (img, video, audio etc.)\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String[]} list of individual HTML embeds\n  //\n  renderValid(urls = ['https://example.com', 'https://test.com']) {\n    if (!urls?.length) return\n    return urls.map(url => this.renderEmbed(url))\n  }\n\n  // Renders a list of URLs as an HTML error block\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String} HTML\n  //\n  renderInvalid(urls = ['https://example.com', 'https://test.com']) {\n    if (!urls?.length) return\n    const element = this.invalidTemplate.content.firstElementChild.cloneNode(true)\n    const allowedHostsElement = element.querySelector('[data-list=\"allowed-hosts\"]')\n    const hostsElement = element.querySelector('[data-list=\"hosts\"]')\n\n    if (allowedHostsElement)\n      if (this.hosts.length)\n        allowedHostsElement.innerHTML = this.hosts.map(host => `<li><code>${host}</code></li>`).join('')\n      else\n        allowedHostsElement.innerHTML = `\n          <li>\n            <strong>Allowed hosts not configured yet.</strong>\n          </li>\n        `\n\n    if (hostsElement) {\n      const hosts = extractURLHosts(urls)\n      if (hosts.length) hostsElement.innerHTML = hosts.map(host => `<li><code>${host}</code></li>`).join('')\n      else hostsElement.innerHTML = '<li><code>Media is only supported from allowed hosts.</code></li>'\n    }\n\n    return element.outerHTML\n  }\n\n  // Sets the template for valid URLs\n  //\n  // @param {String} template - the template HTML\n  // @returns {void}\n  //\n  set validTemplate(template) {\n    this._validTemplate = template\n  }\n\n  // Returns the template for valid URLs\n  //\n  // @returns {String} template HTML\n  //\n  get validTemplate() {\n    if (this._validTemplate) return this._validTemplate\n\n    const template = document.createElement('template')\n    template.innerHTML = '<div><iframe></iframe><img></img></div>'\n    return template\n  }\n\n  // Sets the template for invalid URLs\n  //\n  // @param {String} template - the template HTML\n  // @returns {void}\n  //\n  set invalidTemplate(template) {\n    this._invalidTemplate = template\n  }\n\n  // Returns the template for invalid URLs\n  //\n  // @returns {String} template HTML\n  //\n  get invalidTemplate() {\n    if (this._invalidTemplate) return this._invalidTemplate\n\n    const template = document.createElement('template')\n    template.innerHTML = `\n      <div style=\"background-color:ivory; border:solid 1px red; color:red; padding:15px; font-size:1rem; line-height:1.5rem;\">\n        <h1 class=\"display:flex; align-items:center;\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" style=\"width:1rem; height:1rem; transform: scale(1.5);\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\" />\n          </svg>\n          <span style=\"margin-left:5px; margin-right:5px;\">Copy / Paste</span>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" style=\"width:1rem; height:1rem; transform: scale(1.5);\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z\" />\n          </svg>\n        </h1>\n        <h3 style=\"font-weight:normal;\">The pasted content includes media from unsupported hosts / domains.</h3>\n\n        <h2>Prohibited Hosts / Domains</h2>\n        <ul data-list=\"hosts\"></ul>\n\n        <h2 style=\"color:green;\">Allowed Hosts / Domains</h2>\n        <ul data-list=\"allowed-hosts\" style=\"color:green;\"></ul>\n      </div>\n    `\n    return template\n  }\n}\n", "//import Trix from 'trix'\n//import { Controller } from '@hotwired/stimulus'\nimport { extractURLsFromElement, validateURL } from './urls'\nimport { getMediaType, mediaTags } from './media'\nimport Renderer from './renderer'\n\n// imports for developing and testing with test/index.html\nimport { Controller } from 'https://unpkg.com/@hotwired/stimulus@3.2.1/dist/stimulus.js'\n\nexport default class extends Controller {\n  static values = {\n    hosts: Array, // list of hosts/domains that embeds are allowed from\n    hostsKey: String, // encryption key used to encrypt/decrypt allowed hosts\n    hostsList: Array, // list of encrypted hosts/domains that embeds are allowed from\n    validTemplate: String, // dom id of template to use for valid embeds\n    invalidTemplate: String // dom id of template to use for invalid embeds\n  }\n\n  connect() {\n    this.rememberEncryptionKey()\n  }\n\n  disconnect() {\n    this.forgetEncryptionKey()\n  }\n\n  paste(event) {\n    const { html, string, range } = event.paste\n    let content = html || string || ''\n    const pastedTemplate = this.buildPastedTemplate(content)\n    const pastedElement = pastedTemplate.content.firstElementChild\n    const pastedURLs = extractURLsFromElement(pastedElement)\n    //console.debug('pastedURLs', pastedURLs?.length, pastedURLs)\n\n    // no URLs were pasted, let Trix handle it ...............................................................\n    if (!pastedURLs.length) return\n\n    event.preventDefault()\n    this.editor.setSelectedRange(range)\n    const renderer = new Renderer(this)\n\n    // Media URLs (images, videos, audio etc.)\n    const mediaURLs = pastedURLs.filter(url => getMediaType(url))\n    Array.from(pastedTemplate.content.firstElementChild.querySelectorAll('iframe')).forEach(frame => {\n      if (!mediaURLs.includes(frame.src)) mediaURLs.push(frame.src)\n    })\n    const validMediaURLs = mediaURLs.filter(url => validateURL(url, this.hostsValue))\n    const validMediaURLContent = renderer.renderValid(validMediaURLs)\n    const invalidMediaURLs = mediaURLs.filter(url => !validMediaURLs.includes(url))\n    const invalidMediaURLContent = renderer.renderInvalid(invalidMediaURLs)\n    //console.debug('validMediaURLs', validMediaURLs.length, validMediaURLs)\n    //console.debug('validMediaURLContent', validMediaURLContent)\n    //console.debug('invalidMediaURLs', invalidMediaURLs.length, invalidMediaURLs)\n    //console.debug('invalidMediaURLContent', invalidMediaURLContent)\n\n    // Standard URLs (non-media resources i.e. web pages etc.)\n    const standardURLs = pastedURLs.filter(url => !mediaURLs.includes(url))\n    const validStandardURLs = standardURLs.filter(url => validateURL(url, this.hostsValue))\n    const validStandardURLContent = renderer.renderValid(validStandardURLs)\n    const invalidStandardURLs = standardURLs.filter(url => !validStandardURLs.includes(url))\n    const invalidStandardURLContent = renderer.renderLinks(invalidStandardURLs)\n    //console.debug('validStandardURLs', validStandardURLs.length, validStandardURLs)\n    //console.debug('validStandardURLContent', validStandardURLContent)\n    //console.debug('invalidStandardURLs', invalidStandardURLs.length, invalidStandardURLs)\n    //console.debug('invalidStandardURLContent', invalidStandardUinvalidStandardURLContentRLContent)\n\n    const sanitizedPastedElement = this.sanitizePastedElement(pastedElement)\n    const sanitizedPastedContent = sanitizedPastedElement.innerHTML\n\n    // 1. render invalid media urls\n    this.insert(invalidMediaURLContent, { first: true }).then(() => {\n      // 2. render invalid standard urls\n      this.insert(renderer.renderHeader('Pasted URLs', invalidStandardURLContent)).then(() => {\n        this.insert(invalidStandardURLContent, { disposition: 'inline' }).then(() => {\n          // 3. render valid media urls\n          this.insert(renderer.renderHeader('Embedded Media', validMediaURLContent)).then(() => {\n            this.insert(validMediaURLContent).then(() => {\n              // 4. render valid standard urls\n              this.insert(validStandardURLContent).then(() => {\n                // 5. render the pasted content as sanitized HTML\n                this.insert(renderer.renderHeader('Pasted Content', sanitizedPastedContent)).then(() => {\n                  this.editor.insertLineBreak()\n                  this.insert(sanitizedPastedContent, { disposition: 'inline' })\n                })\n              })\n            })\n          })\n        })\n      })\n    })\n  }\n\n  buildPastedTemplate(content) {\n    const template = document.createElement('template')\n    template.innerHTML = `<div>${content.trim()}</div>`\n    return template\n  }\n\n  sanitizePastedElement(element) {\n    element = element.cloneNode(true)\n    element.querySelectorAll(mediaTags.join(', ')).forEach(tag => tag.remove())\n    return element\n  }\n\n  insertAttachment(content, options = { delay: 0 }) {\n    const { delay } = options\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const attachment = new Trix.Attachment({ content, contentType: 'application/vnd.trix-embed.html' })\n        this.editor.insertAttachment(attachment)\n        resolve()\n      }, delay)\n    })\n  }\n\n  insertHTML(content, options = { delay: 0 }) {\n    const { delay } = options\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.editor.insertHTML(content)\n        // shenanigans to ensure that Trix considers this block of content closed\n        this.editor.moveCursorInDirection('forward')\n        this.editor.insertLineBreak()\n        this.editor.moveCursorInDirection('backward')\n        resolve()\n      }, delay)\n    })\n  }\n\n  insert(content, options = { delay: 0, disposition: 'attachment', first: false }) {\n    const { delay, disposition, first } = options\n\n    if (content?.length) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          if (first) this.editor.deleteInDirection('backward')\n\n          if (typeof content === 'string') {\n            if (disposition === 'inline') return this.insertHTML(content, { delay }).then(resolve)\n            else return this.insertAttachment(content, { delay }).then(resolve)\n          }\n\n          if (Array.isArray(content)) {\n            if (disposition === 'inline')\n              return content\n                .reduce((p, c, i) => p.then(this.insertHTML(c, { delay })), Promise.resolve())\n                .then(resolve)\n            else\n              return content\n                .reduce((p, c, i) => p.then(this.insertAttachment(c, { delay })), Promise.resolve())\n                .then(resolve)\n          }\n\n          resolve()\n        })\n      })\n    }\n\n    return Promise.resolve()\n  }\n\n  get editor() {\n    return this.element.editor\n  }\n\n  // =========================================================================================================\n  // Weak security through obscurity and indirection\n  // =========================================================================================================\n\n  get storageKey() {\n    return btoa(`hopsoft/trix_embed/${this.element.closest('[id]')?.id}`)\n  }\n\n  get encryptionKey() {\n    return sessionStorage.getItem(this.storageKey)\n  }\n\n  rememberEncryptionKey() {\n    if (!this.hasHostsKeyValue) return\n    sessionStorage.setItem(this.storageKey, this.hostsKeyValue)\n    this.element.removeAttribute('data-trix-embed-hosts-key-value')\n  }\n\n  forgetEncryptionKey() {\n    sessionStorage.removeItem(this.storageKey)\n  }\n}\n", "import { generateAndLogEncryptionKey, encryptAndLogValues } from './encryption'\nimport Controller from './controller'\n\nconst defaultOptions = {\n  application: null\n}\n\nfunction initialize(options = defaultOptions) {\n  const { application } = options\n  application.register('trix-embed', Controller)\n}\n\nself.TrixEmbed = { initialize, generateAndLogEncryptionKey, encryptAndLogValues }\n\nexport default self.TrixEmbed\n"],
  "mappings": "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",
  "names": ["options", "extractable", "purposes", "generateKey", "exportKey", "key", "exported", "importKey", "parsed", "encrypt", "value", "encoded", "iv", "buffer", "__spreadProps", "__spreadValues", "data", "decrypt", "encrypted", "ciphertextArray", "char", "generateAndLogEncryptionKey", "encryptAndLogValues", "values", "decrypted", "createURL", "value", "callback", "url", "_error", "createURLHost", "host", "extractURLsFromTextNodes", "element", "urls", "walker", "node", "val", "match", "extractURLsFromElements", "el", "validateURL", "allowedHosts", "valid", "allowedHost", "extractURLHosts", "values", "hosts", "extractURLsFromElement", "elementURLs", "textNodeURLs", "imageMediaTypes", "mediaTypes", "imageMediaTypes", "tagsWithHrefAttribute", "tagsWithSrcAttribute", "mediaTags", "getMediaType", "url", "index", "extension", "error", "Renderer", "controller", "template", "value", "content", "url", "element", "iframe", "img", "getMediaType", "urls", "list", "createURL", "u", "allowedHostsElement", "hostsElement", "host", "hosts", "extractURLHosts", "Controller", "controller_default", "Controller", "event", "html", "string", "range", "content", "pastedTemplate", "pastedElement", "pastedURLs", "extractURLsFromElement", "renderer", "Renderer", "mediaURLs", "url", "getMediaType", "frame", "validMediaURLs", "validateURL", "validMediaURLContent", "invalidMediaURLs", "invalidMediaURLContent", "standardURLs", "validStandardURLs", "validStandardURLContent", "invalidStandardURLs", "invalidStandardURLContent", "sanitizedPastedContent", "template", "element", "mediaTags", "tag", "options", "delay", "resolve", "attachment", "disposition", "first", "p", "c", "i", "_a", "__publicField", "defaultOptions", "initialize", "options", "application", "controller_default", "generateAndLogEncryptionKey", "encryptAndLogValues", "src_default"]
}
