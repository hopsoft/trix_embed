{
  "version": 3,
  "sources": ["../src/encryption.js", "../src/urls.js", "../src/media.js", "../src/guard.js", "../src/store.js", "../src/renderer.js", "../src/controller.js", "../src/index.js"],
  "sourcesContent": ["const options = { name: 'AES-GCM', length: 256 } // encryption options\nconst extractable = true // makes it possible to export the key\nconst purposes = ['encrypt', 'decrypt']\n\n// Generates a key for use with a symmetric encryption algorithm\n//\n// @returns {Promise<CryptoKey>} - The generated key\n//\nasync function generateEncryptionKey() {\n  const extractable = true // makes it possible to export the key later\n  const purposes = ['encrypt', 'decrypt']\n  return await crypto.subtle.generateKey(options, extractable, purposes)\n}\n\n// Exports an encryption key\n//\n// @param {CryptoKey} key - The key to export\n// @returns {Promise<String>} - The exported key as a JSON string\n//\nasync function exportKey(key) {\n  const exported = await crypto.subtle.exportKey('jwk', key)\n  return JSON.stringify(exported)\n}\n\n// Imports an encryption key\n//\n// @param {String} key - The key to import as a string\n// @returns {Promise<CryptoKey>} - The imported key\n//\nasync function importKey(key) {\n  const parsed = JSON.parse(key)\n  return await crypto.subtle.importKey('jwk', parsed, options, extractable, purposes)\n}\n\n// Encrypts a value using a symmetric encryption algorithm\n//\n// @param {String} value - The value to encrypt\n// @param {CryptoKey} key - The key to use for encryption\n// @returns {Promise<String>} - Base64 encoded representation of the encrypted value\n//\nasync function encrypt(value, key) {\n  const encoded = new TextEncoder().encode(String(value))\n  const iv = crypto.getRandomValues(new Uint8Array(12)) // initialization vector\n  const buffer = await crypto.subtle.encrypt({ ...options, iv }, key, encoded) // ciphertext as an ArrayBuffer\n  const data = {\n    ciphertext: btoa(String.fromCharCode(...new Uint8Array(buffer))),\n    iv: btoa(String.fromCharCode(...iv))\n  }\n  return btoa(JSON.stringify(data))\n}\n\n// Decrypts a value using a symmetric encryption algorithm\n//\n// @param {String} encrypted - The Base64 encoded encrypted value\n// @param {CryptoKey} key - The key to use for decryption\n// @returns {Promise<String>} - The decrypted value\n//\nasync function decrypt(encrypted, key) {\n  const data = JSON.parse(atob(encrypted))\n  const ciphertextArray = new Uint8Array(\n    atob(data.ciphertext)\n      .split('')\n      .map(char => char.charCodeAt(0))\n  )\n  const iv = new Uint8Array(\n    atob(data.iv)\n      .split('')\n      .map(char => char.charCodeAt(0))\n  )\n\n  const buffer = await crypto.subtle.decrypt({ ...options, iv }, key, ciphertextArray)\n  return new TextDecoder().decode(buffer)\n}\n\n// Generates a new encryption key\n//\n// @returns {Promise<String>} - The base64 encoded key\n//\nexport async function generateKey() {\n  const key = await generateEncryptionKey()\n  const jsonKey = await exportKey(key)\n  const base64Key = btoa(jsonKey)\n  return base64Key\n}\n\n// Encrypts a list of values\n//\n// @param {String} base64Key - The encryption key to use\n// @param {String[]} values - The values to encrypt\n// @returns {Promise<String>[]} - The encrypted values\n//\nexport async function encryptValues(base64Key, values = []) {\n  const key = await importKey(atob(base64Key))\n  return Promise.all(values.map(value => encrypt(value, key)))\n}\n\n// Decrypts and logs a list of values\n//\n// @param {String} base64Key - The encryption key to use\n// @param {String[]} values - The values to decrypt\n// @returns {Promise<String>[]} - The decrypted values\n//\nexport async function decryptValues(base64Key, encryptedValues = []) {\n  const key = await importKey(atob(base64Key))\n  return Promise.all(encryptedValues.map(encryptedValue => decrypt(encryptedValue, key)))\n}\n\n// Generates a new encryption key and encrypts a list of values\n//\n// @param {Array} values - The values to encrypt\n// @returns {Promise<Object>} - The encryption key and encrypted values\n//\nexport async function generateKeyAndEncryptValues(values = []) {\n  const key = await generateKey()\n  const encryptedValues = await encryptValues(key, values)\n  console.log(`data-trix-embed-key-value=\"${key}\"`)\n  console.log(`data-trix-embed-hosts-value='${JSON.stringify(encryptedValues)}'`)\n  return { key, encryptedValues }\n}\n", "// Creates a URL object from a value and yields the result\n//\n// @param {String} value - Value to convert to a URL (coerced to a string)\n// @param {Function} callback - Function to be called with the URL object\n// @returns {URL, null} URL object\n//\nexport function createURL(value, callback = url => {}) {\n  try {\n    const url = new URL(String(value).trim())\n    if (callback) callback(url)\n    return url\n  } catch (_error) {\n    console.info(`Failed to parse URL! value='${value}']`)\n  }\n  return null\n}\n\n// Creates a URL host from a value and yields the result\n//\n// @param {String} value - Value to convert to a URL host (coerced to a string)\n// @param {Function} callback - Function to be called with the URL host\n// @returns {String, null} URL host\n//\nfunction createURLHost(value, callback = host => {}) {\n  let host = null\n  createURL(value, url => (host = url.host))\n  if (host && callback) callback(host)\n  return host\n}\n\nfunction extractURLsFromTextNodes(element) {\n  const urls = []\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, node => {\n    const value = node.nodeValue\n    if (!value.includes('http')) return NodeFilter.FILTER_REJECT\n    return NodeFilter.FILTER_ACCEPT\n  })\n\n  let node\n  while ((node = walker.nextNode()))\n    node.nodeValue\n      .split(/\\s+/)\n      .filter(val => val.startsWith('http'))\n      .forEach(match =>\n        createURL(match, url => {\n          if (!urls.includes(url.href)) urls.push(url.href)\n        })\n      )\n\n  return urls\n}\n\nfunction extractURLsFromElements(element) {\n  const urls = []\n\n  if (element.src) createURL(element.src, url => urls.push(url.href))\n  if (element.href)\n    createURL(element.href, url => {\n      if (!urls.includes(url.href)) urls.push(url.href)\n    })\n\n  const elements = element.querySelectorAll('[src], [href]')\n  elements.forEach(el => {\n    createURL(el.src || el.href, url => {\n      if (!urls.includes(url.href)) urls.push(url.href)\n    })\n  })\n\n  return urls\n}\n\nexport function validateURL(value, allowedHosts = []) {\n  let valid = false\n  createURLHost(value, host => (valid = !!allowedHosts.find(allowedHost => host.includes(allowedHost))))\n  return valid\n}\n\nexport function extractURLHosts(values) {\n  return values.reduce((hosts, value) => {\n    createURLHost(value, host => {\n      if (!hosts.includes(host)) hosts.push(host)\n    })\n    return hosts\n  }, [])\n}\n\n// Extracts all URLs from an HTML element (all inclusive i.e. elements and text nodes)\n//\n// @param {HTMLElement} element - HTML element\n// @returns {String[]} list of unique URLs\n//\nexport function extractURLsFromElement(element) {\n  const elementURLs = extractURLsFromElements(element)\n  const textNodeURLs = extractURLsFromTextNodes(element)\n  const uniqueURLs = new Set([...elementURLs, ...textNodeURLs])\n  return [...uniqueURLs]\n}\n", "const audioMediaTypes = {\n  mp3: 'audio/mpeg', // MP3 audio format\n  ogg: 'audio/ogg', // OGG audio format\n  wav: 'audio/wav' // WAV audio format\n}\n\nconst imageMediaTypes = {\n  avif: 'image/avif', // AVIF image format\n  bmp: 'image/bmp', // BMP image format\n  gif: 'image/gif', // GIF image format\n  heic: 'image/heic', // HEIC image format\n  heif: 'image/heif', // HEIF image format\n  ico: 'image/x-icon', // ICO image format\n  jp2: 'image/jp2', // JPEG 2000 image format\n  jpeg: 'image/jpeg', // JPEG image format\n  jpg: 'image/jpeg', // JPEG image format (alternative extension)\n  jxr: 'image/vnd.ms-photo', // JPEG XR image format\n  png: 'image/png', // PNG image format\n  svg: 'image/svg+xml', // SVG image format\n  tif: 'image/tiff', // TIFF image format\n  tiff: 'image/tiff', // TIFF image format (alternative extension)\n  webp: 'image/webp' // WebP image format\n}\n\nconst videoMediaTypes = {\n  mp4: 'video/mp4', // MP4 video format\n  ogv: 'video/ogg', // OGG video format\n  webm: 'video/webm' // WebM video format\n}\n\n// TODO: Expand to all media types once proper templates are implemented\nconst mediaTypes = imageMediaTypes\n\nconst tagsWithHrefAttribute = [\n  'animate', // SVG: Animation\n  'animateMotion', // SVG: Animation\n  'animateTransform', // SVG: Animation\n  'area', // HTML: Image map area\n  'audio', // HTML: Audio content\n  'base', // HTML: Base URL\n  'embed', // HTML: Embedded content\n  'feDisplacementMap', // SVG: Filter primitive\n  'feImage', // SVG: Filter primitive\n  'feTile', // SVG: Filter primitive\n  'filter', // SVG: Filter container\n  'font-face-uri', // SVG: Font reference\n  'iframe', // HTML: Inline frame\n  'image', // SVG: Image\n  'link', // HTML: External resources (e.g., stylesheets)\n  'object', // HTML: Embedded content (fallback for non-HTML5 browsers)\n  'script', // HTML: External scripts\n  'source', // HTML: Media source\n  'track', // HTML: Text tracks for media elements\n  'use', // SVG: Reuse shapes from other documents\n  'video' // HTML: Video content\n]\n\nconst tagsWithSrcAttribute = [\n  'audio', // HTML: Audio content\n  'embed', // HTML: Embedded content\n  'iframe', // HTML: Inline frame\n  'img', // HTML: Images\n  'input', // HTML: Input elements with type=\"image\"\n  'script', // HTML: External scripts\n  'source', // HTML: Media source\n  'track', // HTML: Text tracks for media elements\n  'video', // HTML: Video content\n  'frame', // HTML: Deprecated (use iframe instead)\n  'frameset', // HTML: Deprecated (use iframe instead)\n  'object', // HTML: Embedded content\n  'picture', // HTML: Responsive images\n  'use' // SVG: Reuse shapes from other documents\n]\n\nexport const mediaTags = tagsWithHrefAttribute.concat(tagsWithSrcAttribute)\n\nexport function getMediaType(url) {\n  try {\n    url = new URL(url)\n\n    const index = url.pathname.lastIndexOf('.')\n    if (!index) return null\n\n    const extension = url.pathname.substring(index + 1)\n    return mediaTypes[extension]\n  } catch (error) {\n    console.error('Failed to detect media type!', url, error)\n  }\n}\n", "export default class Guard {\n  constructor(controller) {\n    this.controller = controller\n    controller.element.addEventListener('trix-file-accept', event => event.preventDefault())\n  }\n\n  protect() {\n    if (!this.controller.formElement) return\n    const form = this.controller.formElement\n    const input = this.controller.inputElement\n\n    const observer = new MutationObserver((mutations, observer) => {\n      mutations.forEach(mutation => {\n        const { addedNodes, target, type } = mutation\n\n        switch (type) {\n          case 'attributes':\n            if (target.closest('form')?.action === form.action)\n              if (target.id === input.id || target.name === input.name) target.remove()\n            break\n          case 'childList':\n            addedNodes.forEach(node => {\n              if (node.nodeType === Node.ELEMENT_NODE) {\n                if (node.tagName.match(/^form$/i) && node.action === form.action) node.remove()\n                if (target.closest('form')?.action === form.action)\n                  if (node.id === input.id || node.name === input.name) node.remove()\n              }\n            })\n            break\n        }\n      })\n    })\n\n    observer.observe(document.body, {\n      attributeFilter: ['id', 'name'],\n      attributes: true,\n      childList: true,\n      subtree: true\n    })\n  }\n\n  cleanup() {\n    const trix = this.controller.element\n    const input = this.controller.inputElement\n    const toolbar = this.controller.toolbarElement\n\n    input?.remove()\n    toolbar?.remove()\n    trix?.remove()\n  }\n}\n", "export default class Store {\n  constructor(controller) {\n    this.controller = controller\n    this.base = this.obfuscate([location.pathname, this.controller.element.closest('[id]')?.id].join('/'))\n  }\n\n  split(list) {\n    const index = Math.ceil(list.length / 2)\n    return [list.slice(0, index), list.slice(index)]\n  }\n\n  obfuscate(value) {\n    const chars = [...value].map(char => char.charCodeAt(0))\n    const parts = this.split(chars)\n    return [parts[1]?.reverse(), chars[0]].flat().join('')\n  }\n\n  read(key) {\n    return sessionStorage.getItem(this.generateStorageKey(key))\n  }\n\n  write(key, value) {\n    return sessionStorage.setItem(this.generateStorageKey(key), value)\n  }\n\n  remove(key) {\n    return sessionStorage.removeItem(this.generateStorageKey(key))\n  }\n\n  generateStorageKey(value) {\n    const chars = [...this.obfuscate(value)]\n    const [prefix, suffix] = this.split(chars)\n    return btoa(`${prefix}/${this.base}/${suffix}`)\n  }\n}\n", "import { createURL, extractURLHosts } from './urls'\nimport { getMediaType } from './media'\n\nexport default class Renderer {\n  // Constructs a new Renderer instance\n  //\n  // @param {Controller} controller - a Stimulus Controller instance\n  constructor(controller) {\n    this.controller = controller\n\n    this.hosts = this.controller.hostsValue\n\n    // invalid urls template\n    if (this.controller.invalidTemplateValue) {\n      const template = document.getElementById(this.controller.invalidTemplateValue)\n      if (template) this.invalidTemplate = template\n    }\n\n    // valid urls template\n    if (this.controller.validTemplateValue) {\n      const template = document.getElementById(this.controller.validTemplateValue)\n      if (template) this.validTemplate = template\n    }\n  }\n\n  renderHeader(value) {\n    return `\n    <h1>${value}</h1>\n    `\n  }\n\n  // Renders a URL as an HTML embed i.e. an iframe or media tag (img, video, audio etc.)\n  //\n  // @param {String} url - URL\n  // @returns {String} HTML\n  //\n  renderEmbed(url = 'https://example.com') {\n    const element = this.validTemplate.content.firstElementChild.cloneNode(true)\n    const iframe = element.querySelector('iframe')\n    const img = element.querySelector('img')\n\n    if (getMediaType(url)) {\n      iframe.remove()\n      img.src = url\n    } else {\n      img.remove()\n      iframe.src = url\n    }\n    return element.outerHTML\n  }\n\n  // Renders a list of URLs as a list of HTML links i.e. anchor tags <a>\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String[]} list of individual HTML links\n  //\n  renderLinks(urls = ['https://example.com', 'https://test.com']) {\n    urls = urls\n      .filter(url => {\n        let ok = false\n        createURL(url, u => (ok = true))\n        return ok\n      })\n      .sort()\n\n    if (!urls.length) return\n    const links = urls.map(url => `<li><a href='${url}'>${url}</a></li>`)\n    return `<ul>${links.join('')}</ul><br>`\n  }\n\n  // Renders a list of URLs as HTML embeds i.e. iframes or media tags (img, video, audio etc.)\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String[]} list of individual HTML embeds\n  //\n  renderValid(urls = ['https://example.com', 'https://test.com']) {\n    if (!urls?.length) return\n    return urls.map(url => this.renderEmbed(url))\n  }\n\n  // Renders a list of URLs as an HTML error block\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String} HTML\n  //\n  renderInvalid(urls = ['https://example.com', 'https://test.com']) {\n    if (!urls?.length) return\n    const element = this.invalidTemplate.content.firstElementChild.cloneNode(true)\n    const allowedHostsElement = element.querySelector('[data-list=\"allowed-hosts\"]')\n    const hostsElement = element.querySelector('[data-list=\"hosts\"]')\n\n    if (allowedHostsElement)\n      if (this.hosts.length)\n        allowedHostsElement.innerHTML = this.hosts.map(host => `<li><code>${host}</code></li>`).join('')\n      else\n        allowedHostsElement.innerHTML = `\n          <li>\n            <strong>Allowed hosts not configured yet.</strong>\n          </li>\n        `\n\n    if (hostsElement) {\n      const hosts = extractURLHosts(urls)\n      if (hosts.length) hostsElement.innerHTML = hosts.map(host => `<li><code>${host}</code></li>`).join('')\n      else hostsElement.innerHTML = '<li><code>Media is only supported from allowed hosts.</code></li>'\n    }\n\n    return element.outerHTML\n  }\n\n  // Sets the template for valid URLs\n  //\n  // @param {String} template - the template HTML\n  // @returns {void}\n  //\n  set validTemplate(template) {\n    this._validTemplate = template\n  }\n\n  // Returns the template for valid URLs\n  //\n  // @returns {String} template HTML\n  //\n  get validTemplate() {\n    if (this._validTemplate) return this._validTemplate\n\n    const template = document.createElement('template')\n    template.innerHTML = '<div><iframe></iframe><img></img></div>'\n    return template\n  }\n\n  // Sets the template for invalid URLs\n  //\n  // @param {String} template - the template HTML\n  // @returns {void}\n  //\n  set invalidTemplate(template) {\n    this._invalidTemplate = template\n  }\n\n  // Returns the template for invalid URLs\n  //\n  // @returns {String} template HTML\n  //\n  get invalidTemplate() {\n    if (this._invalidTemplate) return this._invalidTemplate\n\n    const template = document.createElement('template')\n    template.innerHTML = `\n      <div>\n        <h1>Copy / Paste</h1>\n        <h3>The pasted content includes media from unsupported hosts / domains.</h3>\n\n        <h2>Prohibited Hosts / Domains</h2>\n        <ul data-list=\"hosts\"></ul>\n\n        <h2>Allowed Hosts / Domains</h2>\n        <ul data-list=\"allowed-hosts\"></ul>\n      </div>\n    `\n    return template\n  }\n}\n", "//import Trix from 'trix'\n//import { Controller } from '@hotwired/stimulus'\nimport { generateKey, encryptValues, decryptValues } from './encryption'\nimport { extractURLsFromElement, validateURL } from './urls'\nimport { getMediaType, mediaTags } from './media'\nimport Guard from './guard'\nimport Store from './store'\nimport Renderer from './renderer'\n\n// imports for developing and testing with test/index.html\nimport { Controller } from 'https://unpkg.com/@hotwired/stimulus@3.2.1/dist/stimulus.js'\n\nexport default class extends Controller {\n  static values = {\n    // templates\n    validTemplate: String, // dom id of template to use for valid embeds\n    invalidTemplate: String, // dom id of template to use for invalid embeds\n\n    // security related values\n    hosts: Array, // list of hosts/domains that embeds are allowed from\n    paranoid: Boolean // guard against attacks\n  }\n\n  async connect() {\n    this.store = new Store(this)\n    this.guard = new Guard(this)\n    await this.rememberConfig()\n    if (this.paranoid) this.guard.protect()\n  }\n\n  disconnect() {\n    if (this.paranoid) this.guard.cleanup()\n    this.forgetConfig()\n  }\n\n  async paste(event) {\n    const { html, string, range } = event.paste\n    let content = html || string || ''\n    const pastedTemplate = this.buildPastedTemplate(content)\n    const pastedElement = pastedTemplate.content.firstElementChild\n    const sanitizedPastedElement = this.sanitizePastedElement(pastedElement)\n    const sanitizedPastedContent = sanitizedPastedElement.innerHTML.trim()\n    const pastedURLs = extractURLsFromElement(pastedElement)\n\n    // no URLs were pasted, let Trix handle it ...............................................................\n    if (!pastedURLs.length) return\n\n    event.preventDefault()\n    this.editor.setSelectedRange(range)\n    const hosts = await this.hosts\n    const renderer = new Renderer(this)\n\n    // Media URLs (images, videos, audio etc.)\n    const mediaURLs = pastedURLs.filter(url => getMediaType(url))\n    Array.from(pastedTemplate.content.firstElementChild.querySelectorAll('iframe')).forEach(frame => {\n      if (!mediaURLs.includes(frame.src)) mediaURLs.push(frame.src)\n    })\n    const validMediaURLs = mediaURLs.filter(url => validateURL(url, hosts))\n    const invalidMediaURLs = mediaURLs.filter(url => !validMediaURLs.includes(url))\n\n    // Standard URLs (non-media resources i.e. web pages etc.)\n    const standardURLs = pastedURLs.filter(url => !mediaURLs.includes(url))\n    const validStandardURLs = standardURLs.filter(url => validateURL(url, hosts))\n    const invalidStandardURLs = standardURLs.filter(url => !validStandardURLs.includes(url))\n\n    let urls\n\n    // 1. render invalid media urls ..........................................................................\n    urls = invalidMediaURLs\n    if (urls.length) await this.insert(renderer.renderInvalid(urls))\n\n    // 2. render invalid standard urls .......................................................................\n    urls = invalidStandardURLs\n    if (urls.length) {\n      await this.insert(renderer.renderHeader('Pasted URLs'))\n      await this.insert(renderer.renderLinks(urls), { disposition: 'inline' })\n    }\n\n    // 3. render valid media urls ............................................................................\n    urls = validMediaURLs\n    if (urls.length) {\n      if (urls.length > 1) await this.insert(renderer.renderHeader('Embedded Media'))\n      await this.insert(renderer.renderValid(urls))\n    }\n\n    // 4. render valid standard urls .........................................................................\n    urls = validStandardURLs\n    if (urls.length) await this.insert(renderer.renderValid(validStandardURLs))\n\n    // exit early if there is only one valid URL and it is the same as the pasted content\n    if (pastedURLs.length === 1 || validMediaURLs[0] === sanitizedPastedContent) return\n    if (pastedURLs.length === 1 || validStandardURLs[0] === sanitizedPastedContent) return\n\n    // 5. render the pasted content as sanitized HTML ........................................................\n    if (sanitizedPastedContent.length) {\n      await this.insert(renderer.renderHeader('Pasted Content', sanitizedPastedContent))\n      this.editor.insertLineBreak()\n      this.insert(sanitizedPastedContent, { disposition: 'inline' })\n    }\n  }\n\n  buildPastedTemplate(content) {\n    const template = document.createElement('template')\n    template.innerHTML = `<div>${content.trim()}</div>`\n    return template\n  }\n\n  sanitizePastedElement(element) {\n    element = element.cloneNode(true)\n    element.querySelectorAll(mediaTags.join(', ')).forEach(tag => tag.remove())\n    return element\n  }\n\n  insertAttachment(content, options = { delay: 0 }) {\n    const { delay } = options\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const attachment = new Trix.Attachment({ content, contentType: 'application/vnd.trix-embed.html' })\n        this.editor.insertAttachment(attachment)\n        resolve()\n      }, delay)\n    })\n  }\n\n  insertHTML(content, options = { delay: 0 }) {\n    const { delay } = options\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.editor.insertHTML(content)\n        // shenanigans to ensure that Trix considers this block of content closed\n        this.editor.moveCursorInDirection('forward')\n        this.editor.insertLineBreak()\n        this.editor.moveCursorInDirection('backward')\n        resolve()\n      }, delay)\n    })\n  }\n\n  insert(content, options = { delay: 0, disposition: 'attachment' }) {\n    const { delay, disposition } = options\n\n    if (content?.length) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          if (typeof content === 'string') {\n            if (disposition === 'inline') return this.insertHTML(content, { delay }).then(resolve)\n            else return this.insertAttachment(content, { delay }).then(resolve)\n          }\n\n          if (Array.isArray(content)) {\n            if (disposition === 'inline')\n              return content\n                .reduce((p, c, i) => p.then(this.insertHTML(c, { delay })), Promise.resolve())\n                .then(resolve)\n            else\n              return content\n                .reduce((p, c, i) => p.then(this.insertAttachment(c, { delay })), Promise.resolve())\n                .then(resolve)\n          }\n\n          resolve()\n        })\n      })\n    }\n\n    return Promise.resolve()\n  }\n\n  // Returns the Trix editor\n  //\n  // @returns {TrixEditor}\n  //\n  get editor() {\n    return this.element.editor\n  }\n\n  get toolbarElement() {\n    const sibling = this.element.previousElementSibling\n    return sibling?.tagName.match(/trix-toolbar/i) ? sibling : null\n  }\n\n  get inputElement() {\n    return document.getElementById(this.element.getAttribute('input'))\n  }\n\n  get formElement() {\n    return this.element.closest('form')\n  }\n\n  get paranoid() {\n    return true || !!this.store.read('paranoid')\n  }\n\n  get key() {\n    try {\n      return JSON.parse(this.store.read('key'))[2]\n    } catch {}\n  }\n\n  get hosts() {\n    try {\n      return decryptValues(this.key, JSON.parse(this.store.read('hosts')))\n    } catch {\n      return []\n    }\n  }\n\n  get reservedDomains() {\n    return ['example.com', 'test.com', 'invalid.com', 'example.cat', 'nic.example', 'example.co.uk']\n  }\n\n  async rememberConfig() {\n    const key = await generateKey()\n    const fakes = await encryptValues(key, this.reservedDomains)\n    const hosts = await encryptValues(key, this.hostsValue)\n\n    this.store.write('key', JSON.stringify([fakes[0], fakes[1], key, fakes[2]]))\n    this.element.removeAttribute('data-trix-embed-key-value')\n\n    this.store.write('hosts', JSON.stringify(hosts))\n    this.element.removeAttribute('data-trix-embed-hosts-value')\n\n    if (true || this.paranoidValue) {\n      this.store.write('paranoid', JSON.stringify(fakes.slice(3)))\n      this.element.removeAttribute('data-trix-embed-paranoid')\n    }\n  }\n\n  forgetConfig() {\n    this.store.remove('key')\n    this.store.remove('hosts')\n    this.store.remove('paranoid')\n  }\n}\n", "import { generateKey, encryptValues, generateKeyAndEncryptValues } from './encryption'\nimport Controller from './controller'\n\nconst defaultOptions = {\n  application: null\n}\n\nfunction initialize(options = defaultOptions) {\n  const { application } = options\n  application.register('trix-embed', Controller)\n}\n\nself.TrixEmbed = {\n  initialize,\n  generateKey,\n  encryptValues,\n  generateKeyAndEncryptValues\n}\n\nexport default self.TrixEmbed\n"],
  "mappings": "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",
  "names": ["options", "extractable", "purposes", "generateEncryptionKey", "exportKey", "key", "exported", "importKey", "parsed", "encrypt", "value", "encoded", "iv", "buffer", "__spreadProps", "__spreadValues", "data", "decrypt", "encrypted", "ciphertextArray", "char", "generateKey", "jsonKey", "encryptValues", "base64Key", "values", "decryptValues", "encryptedValues", "encryptedValue", "generateKeyAndEncryptValues", "createURL", "value", "callback", "url", "_error", "createURLHost", "host", "extractURLsFromTextNodes", "element", "urls", "walker", "node", "val", "match", "extractURLsFromElements", "el", "validateURL", "allowedHosts", "valid", "allowedHost", "extractURLHosts", "values", "hosts", "extractURLsFromElement", "elementURLs", "textNodeURLs", "imageMediaTypes", "mediaTypes", "imageMediaTypes", "tagsWithHrefAttribute", "tagsWithSrcAttribute", "mediaTags", "getMediaType", "url", "index", "extension", "error", "Guard", "controller", "event", "form", "input", "mutations", "observer", "mutation", "_a", "addedNodes", "target", "type", "node", "trix", "toolbar", "Store", "controller", "_a", "list", "index", "value", "chars", "char", "key", "prefix", "suffix", "Renderer", "controller", "template", "value", "url", "element", "iframe", "img", "getMediaType", "urls", "ok", "createURL", "u", "allowedHostsElement", "hostsElement", "host", "hosts", "extractURLHosts", "Controller", "controller_default", "Controller", "Store", "Guard", "event", "html", "string", "range", "content", "pastedTemplate", "pastedElement", "sanitizedPastedContent", "pastedURLs", "extractURLsFromElement", "hosts", "renderer", "Renderer", "mediaURLs", "url", "getMediaType", "frame", "validMediaURLs", "validateURL", "invalidMediaURLs", "standardURLs", "validStandardURLs", "invalidStandardURLs", "urls", "template", "element", "mediaTags", "tag", "options", "delay", "resolve", "attachment", "disposition", "p", "c", "i", "sibling", "e", "decryptValues", "key", "generateKey", "fakes", "encryptValues", "__publicField", "defaultOptions", "initialize", "options", "application", "controller_default", "generateKey", "encryptValues", "generateKeyAndEncryptValues", "src_default"]
}
