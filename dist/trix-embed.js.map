{
  "version": 3,
  "sources": ["../src/urls.js", "../src/media.js", "../src/renderer.js", "../src/controller.js", "../src/index.js"],
  "sourcesContent": ["function createURL(value, callback) {\n  try {\n    const url = new URL(String(value).trim())\n    callback(url.href)\n  } catch (error) {\n    console.error(`Error parsing URL!`, value, error)\n  }\n}\n\nfunction extractURLsFromTextNodes(element) {\n  const urls = []\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, node => {\n    const value = node.nodeValue\n    if (!value.includes('http')) return NodeFilter.FILTER_REJECT\n    return NodeFilter.FILTER_ACCEPT\n  })\n\n  let node\n  while ((node = walker.nextNode()))\n    node.nodeValue\n      .split(/\\s+/)\n      .filter(val => val.startsWith('http'))\n      .forEach(match =>\n        createURL(match, url => {\n          if (!urls.includes(url)) urls.push(url)\n        })\n      )\n\n  return urls\n}\n\nfunction extractURLsFromElements(element) {\n  const urls = []\n\n  if (element.src) createURL(element.src, url => urls.push(url))\n  if (element.href)\n    createURL(element.href, url => {\n      if (!urls.includes(url)) urls.push(url)\n    })\n\n  const elements = element.querySelectorAll('[src], [href]')\n  elements.forEach(el => {\n    createURL(el.src || el.href, url => {\n      if (!urls.includes(url)) urls.push(url)\n    })\n  })\n\n  return urls\n}\n\nexport function extractURLs(element) {\n  const elementURLs = extractURLsFromElements(element)\n  const textNodeURLs = extractURLsFromTextNodes(element)\n  const uniqueURLs = new Set([...elementURLs, ...textNodeURLs])\n  return [...uniqueURLs]\n}\n", "const audioMediaTypes = {\n  mp3: 'audio/mpeg', // MP3 audio format\n  ogg: 'audio/ogg', // OGG audio format\n  wav: 'audio/wav' // WAV audio format\n}\n\nconst imageMediaTypes = {\n  avif: 'image/avif', // AVIF image format\n  bmp: 'image/bmp', // BMP image format\n  gif: 'image/gif', // GIF image format\n  heic: 'image/heic', // HEIC image format\n  heif: 'image/heif', // HEIF image format\n  ico: 'image/x-icon', // ICO image format\n  jp2: 'image/jp2', // JPEG 2000 image format\n  jpeg: 'image/jpeg', // JPEG image format\n  jpg: 'image/jpeg', // JPEG image format (alternative extension)\n  jxr: 'image/vnd.ms-photo', // JPEG XR image format\n  png: 'image/png', // PNG image format\n  svg: 'image/svg+xml', // SVG image format\n  tif: 'image/tiff', // TIFF image format\n  tiff: 'image/tiff', // TIFF image format (alternative extension)\n  webp: 'image/webp' // WebP image format\n}\n\nconst videoMediaTypes = {\n  mp4: 'video/mp4', // MP4 video format\n  ogv: 'video/ogg', // OGG video format\n  webm: 'video/webm' // WebM video format\n}\n\n// TODO: Expand to all media types once proper templates are implemented\nconst mediaTypes = imageMediaTypes\n\nconst tagsWithHrefAttribute = [\n  'animate', // SVG: Animation\n  'animateMotion', // SVG: Animation\n  'animateTransform', // SVG: Animation\n  'area', // HTML: Image map area\n  'audio', // HTML: Audio content\n  'base', // HTML: Base URL\n  'embed', // HTML: Embedded content\n  'feDisplacementMap', // SVG: Filter primitive\n  'feImage', // SVG: Filter primitive\n  'feTile', // SVG: Filter primitive\n  'filter', // SVG: Filter container\n  'font-face-uri', // SVG: Font reference\n  'iframe', // HTML: Inline frame\n  'image', // SVG: Image\n  'link', // HTML: External resources (e.g., stylesheets)\n  'object', // HTML: Embedded content (fallback for non-HTML5 browsers)\n  'script', // HTML: External scripts\n  'source', // HTML: Media source\n  'track', // HTML: Text tracks for media elements\n  'use', // SVG: Reuse shapes from other documents\n  'video' // HTML: Video content\n]\n\nconst tagsWithSrcAttribute = [\n  'audio', // HTML: Audio content\n  'embed', // HTML: Embedded content\n  'iframe', // HTML: Inline frame\n  'img', // HTML: Images\n  'input', // HTML: Input elements with type=\"image\"\n  'script', // HTML: External scripts\n  'source', // HTML: Media source\n  'track', // HTML: Text tracks for media elements\n  'video', // HTML: Video content\n  'frame', // HTML: Deprecated (use iframe instead)\n  'frameset', // HTML: Deprecated (use iframe instead)\n  'object', // HTML: Embedded content\n  'picture', // HTML: Responsive images\n  'use' // SVG: Reuse shapes from other documents\n]\n\nexport const mediaTags = tagsWithHrefAttribute.concat(tagsWithSrcAttribute)\n\nexport function getMediaType(url) {\n  try {\n    url = new URL(url)\n\n    const index = url.pathname.lastIndexOf('.')\n    if (!index) return null\n\n    const extension = url.pathname.substring(index + 1)\n    return mediaTypes[extension]\n  } catch (error) {\n    console.error('Failed to detect media type!', url, error)\n  }\n}\n", "import { getMediaType } from './media'\n\nexport default class Renderer {\n  // Constructs a new Renderer instance\n  //\n  // @param {Controller} controller - a Stimulus Controller instance\n  constructor(controller) {\n    this.controller = controller\n    this.hosts = controller.hostsValue\n\n    // invalid urls template\n    if (controller.invalidTemplateValue) {\n      const template = document.getElementById(controller.invalidTemplateValue)\n      if (template) this.invalidTemplate = template\n    }\n\n    // valid urls template\n    if (controller.validTemplateValue) {\n      const template = document.getElementById(controller.validTemplateValue)\n      if (template) this.validTemplate = template\n    }\n  }\n\n  // Renders a URL as an HTML embed i.e. an iframe or media tag (img, video, audio etc.)\n  //\n  // @param {String} url - URL\n  // @returns {String} HTML\n  render(url = 'https://example.com') {\n    const element = this.validTemplate.content.firstElementChild.cloneNode(true)\n    const iframe = element.querySelector('iframe')\n    const img = element.querySelector('img')\n\n    if (getMediaType(url)) {\n      iframe.remove()\n      img.src = url\n    } else {\n      img.remove()\n      iframe.src = url\n    }\n    return element.outerHTML\n  }\n\n  // Renders a list of URLs as HTML links i.e. anchor tags <a>\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String[]} list of individual HTML links\n  //\n  renderLinks(urls = ['https://example.com', 'https://test.com']) {\n    if (!urls?.length) return\n    return urls.map(url => `<a href='${url}' target='_blank'>${url}</a>`)\n  }\n\n  // Renders a list of URLs as HTML embeds i.e. iframes or media tags (img, video, audio etc.)\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String[]} list of individual HTML embeds\n  //\n  renderValid(urls = ['https://example.com', 'https://test.com']) {\n    if (!urls?.length) return\n    return urls.map(url => this.render(url))\n  }\n\n  // Renders a list of URLs as an HTML error block\n  //\n  // @param {String[]} urls - list of URLs\n  // @returns {String} HTML\n  //\n  renderInvalid(urls = ['https://example.com', 'https://test.com']) {\n    if (!urls?.length) return\n    const element = this.invalidTemplate.content.firstElementChild.cloneNode(true)\n    const hostsElement = element.querySelector('[data-list=\"hosts\"]')\n    const urlsElement = element.querySelector('[data-list=\"urls\"]')\n\n    if (hostsElement)\n      if (this.hosts.length)\n        hostsElement.innerHTML = this.hosts.map(host => `<li><code>${host}</code></li>`).join('')\n      else\n        hostsElement.innerHTML = `\n          <li>\n            <strong>Hosts not configured</strong>\n            <p>Example Configuration</p>\n            <pre><code>&lt;trix-editor data-trix-embed-hosts-value='[\"example.com\", \"test.com\"]'&gt;</code></pre>\n          </li>`\n\n    if (urlsElement) urlsElement.innerHTML = urls.map(url => `<li><code>${url}</code></li>`).join('')\n\n    return element.outerHTML\n  }\n\n  // Sets the template for valid URLs\n  //\n  // @param {String} template - the template HTML\n  // @returns {void}\n  //\n  set validTemplate(template) {\n    this._validTemplate = template\n  }\n\n  // Returns the template for valid URLs\n  //\n  // @returns {String} template HTML\n  //\n  get validTemplate() {\n    if (this._validTemplate) return this._validTemplate\n\n    const template = document.createElement('template')\n    template.innerHTML = '<div><iframe></iframe><img></img></div>'\n    return template\n  }\n\n  // Sets the template for invalid URLs\n  //\n  // @param {String} template - the template HTML\n  // @returns {void}\n  //\n  set invalidTemplate(template) {\n    this._invalidTemplate = template\n  }\n\n  // Returns the template for invalid URLs\n  //\n  // @returns {String} template HTML\n  //\n  get invalidTemplate() {\n    if (this._invalidTemplate) return this._invalidTemplate\n\n    const template = document.createElement('template')\n    template.innerHTML = `\n      <div style=\"background-color:ivory; border:solid 1px red; color:red; padding:10px;\">\n        <h1 slot=\"header\">Unsupported copy/paste embed!</h1>\n        <h2>The pasted content includes media from an unsupported host.</h2>\n        <h3 style=\"color:green;\">Supported Hosts</h3>\n        <ul data-list=\"hosts\" style=\"color:green;\"></ul>\n        <h2>Invalid URLs</h2>\n        <ul data-list=\"urls\"></ul>\n      </div>`\n    return template\n  }\n}\n", "//import Trix from 'trix'\n//import { Controller } from '@hotwired/stimulus'\nimport { extractURLs } from './urls'\nimport { getMediaType } from './media'\nimport Renderer from './renderer'\n\n// imports for developing and testing with test/index.html\nimport { Controller } from 'https://unpkg.com/@hotwired/stimulus@3.2.1/dist/stimulus.js'\n\nexport default class extends Controller {\n  static values = {\n    hosts: Array, // list of hosts/domains that embeds are allowed from\n    validTemplate: String, // dom id of template to use for valid embeds\n    invalidTemplate: String // dom id of template to use for invalid embeds\n  }\n\n  connect() {\n    this.setupWeakSecurity()\n  }\n\n  paste(event) {\n    const { html, string, range } = event.paste\n    let content = html || string || ''\n    const pastedTemplate = this.buildPastedTemplate(content)\n    const pastedURLs = extractURLs(pastedTemplate.content.firstElementChild)\n\n    // no URLs were pasted, let Trix handle it ...............................................................\n    if (!pastedURLs.length) return\n\n    event.preventDefault()\n    this.editor.setSelectedRange(range)\n    const renderer = new Renderer(this)\n\n    // Media URLs (images, videos, audio etc.)\n    const mediaURLs = pastedURLs.filter(url => getMediaType(url))\n    Array.from(pastedTemplate.content.firstElementChild.querySelectorAll('iframe')).forEach(frame => {\n      if (!mediaURLs.includes(frame.src)) mediaURLs.push(frame.src)\n    })\n    const validMediaURLs = mediaURLs.filter(url => this.validateURL(url))\n    const validMediaContent = renderer.renderValid(validMediaURLs)\n    const invalidMediaURLs = mediaURLs.filter(url => !validMediaURLs.includes(url))\n    const invalidMediaContent = renderer.renderInvalid(invalidMediaURLs)\n\n    // Standard URLs (non-media resources i.e. web pages etc.)\n    const standardURLs = pastedURLs.filter(url => !mediaURLs.includes(url))\n    const validStandardURLs = standardURLs.filter(url => this.validateURL(url))\n    const validStandardContent = renderer.renderValid(validStandardURLs)\n    const invalidStandardURLs = standardURLs.filter(url => !validStandardURLs.includes(url))\n    const invalidStandardContent = renderer.renderLinks(invalidStandardURLs)\n\n    // 1. render invalid media urls\n    this.insert(invalidMediaContent, { disposition: 'attachment', first: true }).then(() => {\n      // 2. render invalid standard urls\n      this.insert(invalidStandardContent, { disposition: 'inline' }).then(() => {\n        // 3. render valid media urls\n        this.insert(validMediaContent, { disposition: 'attachment' }).then(() => {\n          // 4. render valid standard urls\n          this.insert(validStandardContent, { disposition: 'attachment' })\n        })\n      })\n    })\n  }\n\n  buildPastedTemplate(content) {\n    const template = document.createElement('template')\n    template.innerHTML = `<div>${content.trim()}</div>`\n    return template\n  }\n\n  validateURL(value) {\n    const url = new URL(value)\n    return !!this.hostsValue.find(host => url.host.includes(host))\n  }\n\n  insertAttachment(content, options = { delay: 0 }) {\n    const { delay } = options\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const attachment = new Trix.Attachment({ content })\n        this.editor.insertAttachment(attachment)\n        resolve()\n      }, delay)\n    })\n  }\n\n  insertHTML(content, options = { delay: 0 }) {\n    const { delay } = options\n    return new Promise(resolve => {\n      setTimeout(() => {\n        this.editor.insertHTML(content)\n        this.editor.insertLineBreak()\n        resolve()\n      }, delay)\n    })\n  }\n\n  insert(content, options = { disposition: 'attachment', first: false }) {\n    const { disposition, first } = options\n\n    if (content?.length) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          if (first) this.editor.deleteInDirection('backward')\n\n          if (typeof content === 'string') {\n            if (disposition === 'inline') return this.insertHTML(content).then(resolve)\n            else return this.insertAttachment(content).then(resolve)\n          }\n\n          if (Array.isArray(content)) {\n            if (disposition === 'inline')\n              return content.reduce((p, c, i) => p.then(this.insertHTML(c)), Promise.resolve()).then(resolve)\n            else\n              return content\n                .reduce((p, c, i) => p.then(this.insertAttachment(c)), Promise.resolve())\n                .then(resolve)\n          }\n\n          resolve()\n        })\n      })\n    }\n\n    return Promise.resolve()\n  }\n\n  get editor() {\n    return this.element.editor\n  }\n\n  // =========================================================================================================\n  // Weak security through obscurity and indirection\n  // =========================================================================================================\n\n  setupWeakSecurity() {\n    const idElement = this.element.closest('[id]')\n    const id = idElement ? idElement.id : ''\n\n    this.hostsKey = `trix-embed-hosts-${id}`\n\n    if (this.rememberedHosts) this.hostsValue = this.rememberedHosts\n    this.rememberHosts()\n  }\n\n  rememberHosts() {\n    sessionStorage.setItem(this.hostsKey, JSON.stringify(this.hostsValue))\n  }\n\n  get rememberedHosts() {\n    const json = sessionStorage.getItem(this.hostsKey)\n    if (!json) return null\n    return JSON.parse(json)\n  }\n}\n", "import Controller from './controller'\n\nconst defaultOptions = {\n  application: null\n}\n\nfunction initialize(options = defaultOptions) {\n  const { application } = options\n  application.register('trix-embed', Controller)\n}\n\nexport default { initialize }\n"],
  "mappings": "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",
  "names": ["createURL", "value", "callback", "url", "error", "extractURLsFromTextNodes", "element", "urls", "walker", "node", "val", "match", "extractURLsFromElements", "el", "extractURLs", "elementURLs", "textNodeURLs", "imageMediaTypes", "mediaTypes", "imageMediaTypes", "tagsWithHrefAttribute", "tagsWithSrcAttribute", "mediaTags", "getMediaType", "url", "index", "extension", "error", "Renderer", "controller", "template", "url", "element", "iframe", "img", "getMediaType", "urls", "hostsElement", "urlsElement", "host", "Controller", "controller_default", "Controller", "event", "html", "string", "range", "content", "pastedTemplate", "pastedURLs", "extractURLs", "renderer", "Renderer", "mediaURLs", "url", "getMediaType", "frame", "validMediaURLs", "validMediaContent", "invalidMediaURLs", "invalidMediaContent", "standardURLs", "validStandardURLs", "validStandardContent", "invalidStandardURLs", "invalidStandardContent", "template", "value", "host", "options", "delay", "resolve", "attachment", "disposition", "first", "p", "c", "i", "idElement", "id", "json", "__publicField", "defaultOptions", "initialize", "options", "application", "controller_default", "src_default"]
}
