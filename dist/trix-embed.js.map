{
  "version": 3,
  "sources": ["../src/trix_embed_controller.js", "../src/index.js"],
  "sourcesContent": ["//import Trix from 'trix'\n//import { Controller } from '@hotwired/stimulus'\n\n// development imports for testing with test/index.html\nimport { Controller } from 'https://unpkg.com/@hotwired/stimulus@3.2.1/dist/stimulus.js'\n\nexport default class extends Controller {\n  static values = {\n    hosts: Array, // list of hosts that embeds are allowed from\n    template: String, // template to use for embeds\n    invalidMessage: {\n      type: String,\n      default: '<strong>The pasted content is not supported!</strong><br><br>Media is limited to:'\n    }\n  }\n\n  paste(event) {\n    const { html, string, range } = event.paste\n    let content = html || string || ''\n    const pastedTemplate = this.buildPastedTemplate(content)\n    const pastedContent = this.extractContent(pastedTemplate)\n    const pastedMediaURLs = this.extractMediaURLs(pastedTemplate)\n\n    if (!this.validatePasted(pastedTemplate, pastedMediaURLs)) {\n      if (pastedMediaURLs.length === 0) return // no media, so let Trix handle it\n      return this.createContentAttachment(this.invalidMessage, range)\n    }\n\n    if (!this.template) return this.createContentAttachment(pastedContent, range)\n\n    // TODO: add error handling for invalid templates\n    const element = this.template.content.firstElementChild.cloneNode(true)\n    const iframe = element.tagName.match(/iframe/i) ? element : element.querySelector('iframe')\n    iframe.src = this.extractMediaURLs(pastedTemplate)[0]\n    this.createContentAttachment(element.outerHTML, range)\n  }\n\n  buildPastedTemplate(content) {\n    const template = document.createElement('template')\n    template.innerHTML = content.trim()\n    return template\n  }\n\n  validatePasted(template, urls) {\n    if (template.content.childNodes.length !== 1) return false\n    if (!this.validNodeTypes.includes(template.content.firstChild.nodeType)) return false\n    return urls.length === urls.filter(url => this.validateURL(url))\n  }\n\n  validateURL(url) {\n    return !!this.validHosts.find(host => url.includes(host))\n  }\n\n  extractContent(template) {\n    switch (template.content.firstChild.nodeType) {\n      case Node.TEXT_NODE:\n        return template.content.textContent\n      case Node.ELEMENT_NODE:\n        return template.content.firstElementChild.outerHTML\n      default:\n        return ''\n    }\n  }\n\n  sanitizeURL(url) {\n    url = String(url).trim()\n    return url.startsWith('http') ? url : null\n  }\n\n  extractMediaURLs(template) {\n    const urls = []\n\n    switch (template.content.firstChild.nodeType) {\n      case Node.TEXT_NODE:\n        urls.push(this.sanitizeURL(template.content.textContent))\n        break\n      case Node.ELEMENT_NODE:\n        const elements = template.content.querySelectorAll('audio, embed, frame, iframe, img, video')\n        elements.forEach(element => urls.push(this.sanitizeURL(element.src || element.href)))\n        break\n    }\n\n    return urls.filter(url => url)\n  }\n\n  createContentAttachment(content, range) {\n    console.log('createContentAttachment', content)\n    const attachment = new Trix.Attachment({ content, contentType: 'text/html' })\n    console.log('attachment', attachment)\n    this.editor.insertAttachment(attachment)\n\n    setTimeout(() => {\n      this.editor.setSelectedRange(range)\n      this.editor.deleteInDirection('backward')\n      this.editor.moveCursorInDirection('forward')\n    })\n  }\n\n  get validNodeTypes() {\n    return [Node.ELEMENT_NODE, Node.TEXT_NODE]\n  }\n\n  get validHosts() {\n    return this.hostsValue\n  }\n\n  get invalidMessage() {\n    return `${this.invalidMessageValue} <code>${this.hostsValue.join(', ')}</code>`\n  }\n\n  get template() {\n    if (!this.hasTemplateValue) return null\n    return document.getElementById(this.templateValue)\n  }\n\n  get editor() {\n    return this.element.editor\n  }\n}\n", "//import Trix from 'trix'\nimport TrixEmbedController from './trix_embed_controller'\n\nTrix.config.attachments['text/html'] = { caption: { name: true } }\n\nexport { TrixEmbedController }\n"],
  "mappings": "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",
  "names": ["Controller", "trix_embed_controller_default", "Controller", "event", "html", "string", "range", "content", "pastedTemplate", "pastedContent", "pastedMediaURLs", "element", "iframe", "template", "urls", "url", "host", "attachment", "__publicField"]
}
