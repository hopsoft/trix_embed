{
  "version": 3,
  "sources": ["../src/urls.js", "../src/media.js", "../src/renderer.js", "../src/controller.js"],
  "sourcesContent": ["function createURL(value, callback) {\n  try {\n    const url = new URL(String(value).trim())\n    callback(url.href)\n  } catch (error) {\n    console.error(`Error parsing URL!`, value, error)\n  }\n}\n\nfunction extractURLsFromTextNodes(element) {\n  const urls = []\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, node => {\n    const value = node.nodeValue\n    if (!value.includes('http')) return NodeFilter.FILTER_REJECT\n    return NodeFilter.FILTER_ACCEPT\n  })\n\n  let node\n  while ((node = walker.nextNode()))\n    node.nodeValue\n      .split(/\\s+/)\n      .filter(val => val.startsWith('http'))\n      .forEach(match =>\n        createURL(match, url => {\n          if (!urls.includes(url)) urls.push(url)\n        })\n      )\n\n  return urls\n}\n\nfunction extractURLsFromElements(element) {\n  const urls = []\n\n  if (element.src) createURL(element.src, url => urls.push(url))\n  if (element.href)\n    createURL(element.href, url => {\n      if (!urls.includes(url)) urls.push(url)\n    })\n\n  const elements = element.querySelectorAll('[src], [href]')\n  elements.forEach(el => {\n    createURL(el.src || el.href, url => {\n      if (!urls.includes(url)) urls.push(url)\n    })\n  })\n\n  return urls\n}\n\nexport function extractURLs(element) {\n  const elementURLs = extractURLsFromElements(element)\n  const textNodeURLs = extractURLsFromTextNodes(element)\n  return [...elementURLs, ...textNodeURLs]\n}\n", "const mediaTypes = {\n  avif: 'image/avif', // AVIF image format\n  bmp: 'image/bmp', // BMP image format\n  gif: 'image/gif', // GIF image format\n  heic: 'image/heic', // HEIC image format\n  heif: 'image/heif', // HEIF image format\n  ico: 'image/x-icon', // ICO image format\n  jp2: 'image/jp2', // JPEG 2000 image format\n  jpeg: 'image/jpeg', // JPEG image format\n  jpg: 'image/jpeg', // JPEG image format (alternative extension)\n  jxr: 'image/vnd.ms-photo', // JPEG XR image format\n  mp3: 'audio/mpeg', // MP3 audio format\n  mp4: 'video/mp4', // MP4 video format\n  ogg: 'audio/ogg', // OGG audio format\n  ogv: 'video/ogg', // OGG video format\n  png: 'image/png', // PNG image format\n  svg: 'image/svg+xml', // SVG image format\n  tif: 'image/tiff', // TIFF image format\n  tiff: 'image/tiff', // TIFF image format (alternative extension)\n  wav: 'audio/wav', // WAV audio format\n  webm: 'video/webm', // WebM video format\n  webp: 'image/webp' // WebP image format\n}\n\nconst tagsWithHrefAttribute = [\n  'animate', // SVG: Animation\n  'animateMotion', // SVG: Animation\n  'animateTransform', // SVG: Animation\n  'area', // HTML: Image map area\n  'audio', // HTML: Audio content\n  'base', // HTML: Base URL\n  'embed', // HTML: Embedded content\n  'feDisplacementMap', // SVG: Filter primitive\n  'feImage', // SVG: Filter primitive\n  'feTile', // SVG: Filter primitive\n  'filter', // SVG: Filter container\n  'font-face-uri', // SVG: Font reference\n  'iframe', // HTML: Inline frame\n  'image', // SVG: Image\n  'link', // HTML: External resources (e.g., stylesheets)\n  'object', // HTML: Embedded content (fallback for non-HTML5 browsers)\n  'script', // HTML: External scripts\n  'source', // HTML: Media source\n  'track', // HTML: Text tracks for media elements\n  'use', // SVG: Reuse shapes from other documents\n  'video' // HTML: Video content\n]\n\nconst tagsWithSrcAttribute = [\n  'audio', // HTML: Audio content\n  'embed', // HTML: Embedded content\n  'iframe', // HTML: Inline frame\n  'img', // HTML: Images\n  'input', // HTML: Input elements with type=\"image\"\n  'script', // HTML: External scripts\n  'source', // HTML: Media source\n  'track', // HTML: Text tracks for media elements\n  'video', // HTML: Video content\n  'frame', // HTML: Deprecated (use iframe instead)\n  'frameset', // HTML: Deprecated (use iframe instead)\n  'object', // HTML: Embedded content\n  'picture', // HTML: Responsive images\n  'use' // SVG: Reuse shapes from other documents\n]\n\nexport const mediaTags = tagsWithHrefAttribute.concat(tagsWithSrcAttribute)\n\nexport function getMediaType(url) {\n  try {\n    url = new URL(url)\n\n    const index = url.pathname.lastIndexOf('.')\n    if (!index) return null\n\n    const extension = url.pathname.substring(index + 1)\n    return mediaTypes[extension]\n  } catch (error) {\n    console.error('Failed to detect media type!', url, error)\n  }\n}\n", "export default class Renderer {\n  constructor(controller) {\n    this.controller = controller\n    this.hosts = controller.hostsValue\n\n    if (controller.invalidTemplateValue) {\n      const template = document.getElementById(controller.invalidTemplateValue)\n      if (template) this.invalidTemplate = template\n    }\n\n    if (controller.validTemplateValue) {\n      const template = document.getElementById(controller.validTemplateValue)\n      if (template) this.validTemplate = template\n    }\n  }\n\n  renderValid(url) {\n    const node = this.validTemplate.content.firstElementChild.cloneNode(true)\n    const iframe = node.querySelector('iframe')\n    iframe.src = url\n    return node.outerHTML\n  }\n\n  renderInvalid(urls) {\n    const node = this.invalidTemplate.content.firstElementChild.cloneNode(true)\n    const hostsElement = node.querySelector('[data-list=\"hosts\"]')\n    const urlsElement = node.querySelector('[data-list=\"urls\"]')\n\n    if (hostsElement)\n      hostsElement.innerHTML = this.hosts.map(host => `<li><code>${host}</code></li>`).join('')\n\n    if (urlsElement) urlsElement.innerHTML = urls.map(url => `<li><code>${url}</code></li>`).join('')\n\n    return node.outerHTML\n  }\n\n  set validTemplate(template) {\n    this._validTemplate = template\n  }\n\n  get validTemplate() {\n    if (this._validTemplate) return this._validTemplate\n\n    const template = document.createElement('template')\n    template.innerHTML = `\n      <div style=\"border:solid 1px gainsboro; border-radius:5px; display:inline-block; padding:10px;\">\n        <iframe\n          allow=\"\"\n          allowfullscreen\n          frameborder=\"0\"\n          loading=\"lazy\"\n          referrerpolicy=\"no-referrer\"\n          scrolling=\"no\"\n          width=\"854\"\n          height=\"480\"\n          style=\"border:solid 1px gainsboro;\">\n        </iframe>\n      </div>`\n    return template\n  }\n\n  set invalidTemplate(template) {\n    this._invalidTemplate = template\n  }\n\n  get invalidTemplate() {\n    if (this._invalidTemplate) return this._invalidTemplate\n\n    const template = document.createElement('template')\n    template.innerHTML = `\n      <div style=\"background-color:ivory; border:solid 1px red; color:red; padding:10px;\">\n        <h1 slot=\"header\">Unsupported copy/paste embed!</h1>\n        <p>The pasted content includes media from an unsupported host.</p>\n        <h2>Supported Hosts</h2>\n        <ul data-list=\"hosts\"></ul>\n        <h2>Pasted URLs</h2>\n        <ul data-list=\"urls\"></ul>\n      </div>`\n    return template\n  }\n}\n", "//import Trix from 'trix'\n//import { Controller } from '@hotwired/stimulus'\nimport { extractURLs } from './urls'\nimport { getMediaType } from './media'\nimport Renderer from './renderer'\n\n// imports for developing and testing with test/index.html\nimport { Controller } from 'https://unpkg.com/@hotwired/stimulus@3.2.1/dist/stimulus.js'\n\nexport default class extends Controller {\n  static values = {\n    hosts: Array, // list of hosts that embeds are allowed from\n    validTemplate: String, // dom id of template to use for valid embeds\n    invalidTemplate: String // dom id of template to use for invalid embeds\n  }\n\n  paste(event) {\n    const { html, string, range } = event.paste\n    let content = html || string || ''\n    const pastedTemplate = this.buildPastedTemplate(content)\n    const pastedURLs = extractURLs(pastedTemplate.content.firstElementChild)\n\n    if (!pastedURLs.length) return // let Trix handle it\n\n    // iframe URLs\n    const pastedFrames = Array.from(pastedTemplate.content.firstElementChild.querySelectorAll('iframe'))\n    const frameURLs = pastedFrames.map(frame => frame.src)\n    const validFrameURLs = frameURLs.filter(url => this.validateURL(url))\n    const invalidFrameURLs = frameURLs.filter(url => !validFrameURLs.includes(url))\n\n    // Media URLs\n    const mediaURLs = pastedURLs.filter(url => getMediaType(url) && !frameURLs.includes(url))\n    const validMediaURLs = mediaURLs.filter(url => this.validateURL(url))\n    const invalidMediaURLs = mediaURLs.filter(url => !validMediaURLs.includes(url))\n\n    // Standard URLs\n    const standardURLs = pastedURLs.filter(url => !frameURLs.includes(url) && !mediaURLs.includes(url))\n    const validStandardURLs = standardURLs.filter(url => this.validateURL(url))\n    //const invalidStandardURLs = standardURLs.filter(url => !validStandardURLs.includes(url))\n\n    // intentionally omit standard URLs from valid/invalid\n    const validURLs = [...validFrameURLs, ...validMediaURLs]\n    const invalidURLs = [...invalidFrameURLs, ...invalidMediaURLs]\n\n    const renderer = new Renderer(this)\n\n    // detect if a single solitary valid URL was pasted\n    const solitaryValidURL =\n      !frameURLs.length && !mediaURLs.length && standardURLs.length === 1 && this.validateURL(standardURLs[0])\n        ? standardURLs[0]\n        : null\n    if (solitaryValidURL) {\n      this.attachContent(renderer.renderValid(solitaryValidURL))\n      return setTimeout(() => this.removePastedContent(range))\n    }\n\n    if (!frameURLs.length && !mediaURLs.length) return // let Trix handle it\n    if (!frameURLs.length && validMediaURLs.length === mediaURLs.length) return // let Trix handle it\n\n    // no valid URLs\n    if (!validURLs.length) {\n      this.removePastedContent(range)\n      return this.attachContent(renderer.renderInvalid(pastedURLs.sort()))\n    }\n\n    // at least one valid URL\n\n    // render valid URLs\n    validURLs.forEach(url => this.attachContent(renderer.renderValid(url)))\n\n    // render standard URLs\n    if (standardURLs.length) this.attachContent(standardURLs.sort().join('<br>'))\n\n    // render invalid URLs\n    if (invalidURLs.length) this.attachContent(renderer.renderInvalid(pastedURLs.sort()))\n\n    setTimeout(() => this.removePastedContent(range))\n  }\n\n  buildPastedTemplate(content) {\n    const template = document.createElement('template')\n    template.innerHTML = `<div>${content.trim()}</div>`\n    return template\n  }\n\n  removePastedContent(range) {\n    this.editor.setSelectedRange(range)\n    this.editor.deleteInDirection('backward')\n    this.editor.moveCursorInDirection('forward')\n  }\n\n  validateURL(value) {\n    const url = new URL(value)\n    return !!this.hostsValue.find(host => url.host.includes(host))\n  }\n\n  attachContent(content) {\n    const attachment = new Trix.Attachment({ content })\n    this.editor.insertAttachment(attachment)\n  }\n\n  get editor() {\n    return this.element.editor\n  }\n}\n"],
  "mappings": "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",
  "names": ["createURL", "value", "callback", "url", "error", "extractURLsFromTextNodes", "element", "urls", "walker", "node", "val", "match", "extractURLsFromElements", "el", "extractURLs", "elementURLs", "textNodeURLs", "mediaTypes", "tagsWithHrefAttribute", "tagsWithSrcAttribute", "mediaTags", "getMediaType", "url", "index", "extension", "error", "Renderer", "controller", "template", "url", "node", "iframe", "urls", "hostsElement", "urlsElement", "host", "Controller", "controller_default", "Controller", "event", "html", "string", "range", "content", "pastedTemplate", "pastedURLs", "extractURLs", "frameURLs", "frame", "validFrameURLs", "url", "invalidFrameURLs", "mediaURLs", "getMediaType", "validMediaURLs", "invalidMediaURLs", "standardURLs", "validStandardURLs", "validURLs", "invalidURLs", "renderer", "Renderer", "solitaryValidURL", "template", "value", "host", "attachment", "__publicField"]
}
